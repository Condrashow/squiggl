{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getOptions","container","svg","id","width","offsetWidth","height","path","arcRadius","stroke","strokeWidth","handleDrop","document","querySelector","innerHTML","setState","loading","squiggled","handleAcceptedDrop","file","event","fileReader","FileReader","onload","evt","arrayBuffer","target","result","squigglify","readAsArrayBuffer","squiggl","extractVolumeData","then","volumeData","renderSquiggl","options","formattedVolumeData","formatVolumeData","state","el","createElement","childNodes","length","removeChild","appendChild","optimizedResize","add","react_default","a","className","es","onDrop","accept","multiple","disabled","onDropAccepted","href","rel","xmlns","viewBox","fill","fillOpacity","fillRule","d","Component","callbacks","running","resize","window","requestAnimationFrame","runCallbacks","setTimeout","forEach","callback","addEventListener","push","addCallback","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e9ea0f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport squiggl from 'squiggl';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor( props ) {\n    super( props );\n\n    this.state = {\n      loading: false,\n      squiggled: false\n    };\n  }\n\n  componentDidMount() {\n    const container = document.querySelector( '#waveform-container' );\n    const renderSquiggl = this.renderSquiggl;\n\n    optimizedResize.add(() => {\n      if( container.childNodes.length > 0 ) {\n        renderSquiggl();\n      }\n    });\n  }\n\n  getOptions = ( container ) => {\n    return {\n      svg: {\n        id: 'squiggl',\n        width: container.offsetWidth,\n        height: 60\n      },\n      path: {\n        arcRadius: 2.25,\n        stroke: '#eaeaef',\n        strokeWidth: 1.2\n      }\n    };\n  }\n\n  handleDrop = () => {\n    const container = document.querySelector( '#waveform-container' );\n    container.innerHTML = '';\n\n    this.setState({\n      loading: true,\n      squiggled: false\n    });\n  }\n  handleAcceptedDrop = ( file, event ) => {\n    const fileReader = new FileReader();\n    fileReader.onload = ( evt ) => {\n      const arrayBuffer = evt.target.result;\n\n      this.squigglify( arrayBuffer );\n    };\n    fileReader.readAsArrayBuffer( file[ 0 ] );\n  }\n\n  squigglify = ( arrayBuffer ) => {\n    squiggl.extractVolumeData( arrayBuffer )\n      .then( volumeData => {\n        this.setState({ volumeData }, this.renderSquiggl );\n      })\n  }\n  renderSquiggl = () => {\n    const container = document.querySelector( '#waveform-container' );\n    const options = this.getOptions( container );\n    const formattedVolumeData = squiggl\n      .formatVolumeData( this.state.volumeData,\n                         options.svg.width,\n                         options.path.arcRadius );\n    const el = squiggl.createElement( formattedVolumeData, options );\n\n    if( container.childNodes.length > 0 ) {\n      container.removeChild( container.childNodes[ 0 ] );\n    }\n    container.appendChild( el );\n\n    this.setState({\n      loading: false,\n      squiggled: true\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Dropzone onDrop={ this.handleDrop }\n                  accept=\"audio/*\"\n                  multiple={ false }\n                  disabled={ this.state.loading }\n                  onDropAccepted={ this.handleAcceptedDrop }\n                  className=\"Dropzone\">\n          <header className=\"App-header\">\n            <h1>squiggl</h1>\n            <p>\n              {\n                this.state.loading ?\n                  'Loading...' :\n                  'Try dropping an audio file here, or click anywhere to select an audio file to upload.'\n              }\n            </p>\n            <div id=\"waveform-container\"></div>\n            {\n              this.state.squiggled &&\n              <p>\n                Try resizing the window.\n              </p>\n            }\n          </header>\n        </Dropzone>\n\n        <a href=\"https://github.com/aprct/squiggl\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"gh-link\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 16 16\"><path fill=\"#FFF\" fillOpacity=\"0.7\" fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/></svg>\n        </a>\n      </div>\n    );\n  }\n}\n\n/**\n * Responsive code\n */\nvar optimizedResize = (function() {\n\n  var callbacks = [],\n  running = false;\n\n  // fired on resize event\n  function resize() {\n\n    if (!running) {\n      running = true;\n\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(runCallbacks);\n      } else {\n        setTimeout(runCallbacks, 66);\n      }\n    }\n\n  }\n\n  // run the actual callbacks\n  function runCallbacks() {\n\n    callbacks.forEach(function(callback) {\n      callback();\n    });\n\n    running = false;\n  }\n\n  // adds callback to loop\n  function addCallback(callback) {\n\n    if (callback) {\n      callbacks.push(callback);\n    }\n\n  }\n\n  return {\n    // public method to add additional callback\n    add: function(callback) {\n      if (!callbacks.length) {\n        window.addEventListener('resize', resize);\n      }\n      addCallback(callback);\n    }\n  }\n}());\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}